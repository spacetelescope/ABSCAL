pro get_kur_wave, w, wmin, wmax, ostar2002 = ostar2002, W_INDEX = good
;+
; NAME:
;	GET_KUR_WAVE
; PURPOSE:
;	Quickly return the wavelength grid used in the Kurucz ATLAS9 models
;
; CALLING SEQUENCE:
;	GET_KUR_WAVE, W, [ WMIN, WMAX ]
;
; OPTIONAL INPUTS:
;	WMIN, WMAX -  Scalars specifying the minimum and maximum wavelength 
;		values (in Angstroms) to return.   If not supplied, then the 
;		entire 1221 element wavelength grid between 90.9 A and 
;		1600000 A is returned.       
; OUTPUTS:
;	W -  Floating point vector wavelength grid, in Angstroms
; OPTIONAL iNPUT KEYWORD:
;       /OSTAR2002 - If set, then return the 6105 element wavelength vector
;           used in the OSTAR2002 database, which is at 5 times the resolution
;           of the Kurucz models.
;       W_INDEX - longword vector of the indicies of the 1221 element Kurucz
;            vector which are actually returned (if WMIN and WMAX are supplied).
;            Useful as input to KUR_INT.
; EXAMPLE:
;	Return the 190 Kurucz wavelength values between 1200 and 3200 A
;
;	IDL> get_kur_wave, w, 1200, 3200
; PROCEDURES USED:
;	 LIST_WITH_PATH()
; REVISION HISTORY:
;	Written        W. Landsman           September, 1992
;	STIS version, assume kurucz.dat is in IEEE format, UIT_DATA can
;	be multiple directories
;       Added /OSTAR2002 keyword      June 2004
;-
 On_error,2

 if N_params() LT 1 then begin
     print,'Syntax - get_kur_wave, w, [wmin, wmax, /OSTAR2002]'
     print,'w - output giving wavelength grid used in the Kurucz models'
     return
 endif

; Open Kurucz data file on ~/kurucz

;rcb?? kname = '~/stisidl/kurucz/kurucz.dat' - file deleted: byte swap problem
;rcb?? openr, lun, kname(0), /GET_LUN
;rcb?? flx = assoc(lun, fltarr(1221))
; if keyword_set(ostar2002) then w1 = flx(0) else w = flx(0)  ;Read in wavelength grid
; free_lun, lun

dbopen,'kurucz'			; rcb 06dec27
dbext,0,'flux',flx		; ..........
dbclose
if keyword_set(ostar2002) then w1 = flx else w = flx  ;rcb

 if keyword_set(ostar2002) then begin
  w = fltarr(1221*5)
  ii = indgen(1221)*5
  w2 = shift(w1,-1)
  w[ii+2] = w1
  w[ii+3] = 4*w1/5. + w2/5.
  w[ii+4] = 3*w1/5. + 2*w2/5.
  w[ii+5] = 2*w1/5. + 3*w2/5.
  w[ii+6] = w1/5. + 4*w2/5
  w[6103] = 2*w[6102] - w[6101]
  w[6104]  =2*w[6102] - w[6100]
  w[1] = 2*w[2] - w[3]
  w[0] = 2*w[2] - w[4]
 endif

 n1 = N_elements(w) -1 
 If N_elements( wmin) EQ 0 then return
 if N_elements( wmax) EQ 0 then wmax = w(n1) +1.

 good = where ( ( w GE wmin) and (w LE wmax), Ngood )
 if Ngood EQ 0 then $
     message,'ERROR - Invalid Wavelength range specified' else $
     w = w[good]
 return
 end
